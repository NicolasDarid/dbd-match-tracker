#!/usr/bin/env node

/**
 * Script de v√©rification de s√©curit√© pour DBD Match Tracker
 * V√©rifie les configurations de s√©curit√© avant le d√©ploiement
 */

const fs = require("fs");
const path = require("path");

console.log("üîí V√©rification de s√©curit√© DBD Match Tracker\n");

// V√©rifications
const checks = [];

// 1. V√©rifier les variables d'environnement
function checkEnvironmentVariables() {
  console.log("üìã V√©rification des variables d'environnement...");

  const requiredVars = [
    "DATABASE_URL",
    "BETTER_AUTH_SECRET",
    "BETTER_AUTH_URL",
  ];

  const missing = requiredVars.filter((varName) => !process.env[varName]);

  if (missing.length > 0) {
    console.log(`‚ùå Variables manquantes: ${missing.join(", ")}`);
    checks.push(false);
  } else {
    console.log("‚úÖ Toutes les variables d'environnement sont pr√©sentes");
    checks.push(true);
  }

  // V√©rifier la longueur du secret
  if (
    process.env.BETTER_AUTH_SECRET &&
    process.env.BETTER_AUTH_SECRET.length < 32
  ) {
    console.log("‚ùå BETTER_AUTH_SECRET doit faire au moins 32 caract√®res");
    checks.push(false);
  } else if (process.env.BETTER_AUTH_SECRET) {
    console.log("‚úÖ BETTER_AUTH_SECRET a une longueur suffisante");
    checks.push(true);
  }
}

// 2. V√©rifier les headers de s√©curit√©
function checkSecurityHeaders() {
  console.log("\nüõ°Ô∏è V√©rification des headers de s√©curit√©...");

  const nextConfigPath = path.join(process.cwd(), "next.config.ts");

  if (fs.existsSync(nextConfigPath)) {
    const content = fs.readFileSync(nextConfigPath, "utf8");

    const requiredHeaders = [
      "X-Frame-Options",
      "X-Content-Type-Options",
      "Referrer-Policy",
      "X-XSS-Protection",
      "Strict-Transport-Security",
      "Content-Security-Policy",
    ];

    const missing = requiredHeaders.filter(
      (header) => !content.includes(header)
    );

    if (missing.length > 0) {
      console.log(`‚ùå Headers manquants: ${missing.join(", ")}`);
      checks.push(false);
    } else {
      console.log("‚úÖ Tous les headers de s√©curit√© sont configur√©s");
      checks.push(true);
    }
  } else {
    console.log("‚ùå Fichier next.config.ts non trouv√©");
    checks.push(false);
  }
}

// 3. V√©rifier le middleware de s√©curit√©
function checkSecurityMiddleware() {
  console.log("\nüîê V√©rification du middleware de s√©curit√©...");

  const middlewarePath = path.join(process.cwd(), "src", "middleware.ts");

  if (fs.existsSync(middlewarePath)) {
    const content = fs.readFileSync(middlewarePath, "utf8");

    const requiredFeatures = [
      "X-Frame-Options",
      "X-Content-Type-Options",
      "rateLimit",
      "trustedOrigins",
    ];

    const missing = requiredFeatures.filter(
      (feature) => !content.includes(feature)
    );

    if (missing.length > 0) {
      console.log(`‚ùå Fonctionnalit√©s manquantes: ${missing.join(", ")}`);
      checks.push(false);
    } else {
      console.log("‚úÖ Middleware de s√©curit√© configur√©");
      checks.push(true);
    }
  } else {
    console.log("‚ùå Fichier middleware.ts non trouv√©");
    checks.push(false);
  }
}

// 4. V√©rifier les d√©pendances
function checkDependencies() {
  console.log("\nüì¶ V√©rification des d√©pendances...");

  const packageJsonPath = path.join(process.cwd(), "package.json");

  if (fs.existsSync(packageJsonPath)) {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf8"));

    // V√©rifier les versions critiques
    const nextVersion = packageJson.dependencies?.next;
    const betterAuthVersion = packageJson.dependencies?.["better-auth"];

    if (nextVersion && nextVersion.includes("15.5")) {
      console.log("‚úÖ Next.js version s√©curis√©e");
      checks.push(true);
    } else {
      console.log(
        `‚ùå Next.js version potentiellement vuln√©rable: ${nextVersion}`
      );
      checks.push(false);
    }

    if (betterAuthVersion && betterAuthVersion.includes("1.3")) {
      console.log("‚úÖ Better Auth version s√©curis√©e");
      checks.push(true);
    } else {
      console.log(
        `‚ùå Better Auth version potentiellement vuln√©rable: ${betterAuthVersion}`
      );
      checks.push(false);
    }
  }
}

// 5. V√©rifier la configuration de la base de donn√©es
function checkDatabaseConfig() {
  console.log("\nüóÑÔ∏è V√©rification de la configuration de la base de donn√©es...");

  const prismaSchemaPath = path.join(process.cwd(), "prisma", "schema.prisma");

  if (fs.existsSync(prismaSchemaPath)) {
    const content = fs.readFileSync(prismaSchemaPath, "utf8");

    if (content.includes('provider = "postgresql"')) {
      console.log("‚úÖ PostgreSQL configur√©");
      checks.push(true);
    } else {
      console.log("‚ùå PostgreSQL non configur√©");
      checks.push(false);
    }
  } else {
    console.log("‚ùå Fichier schema.prisma non trouv√©");
    checks.push(false);
  }
}

// Ex√©cuter toutes les v√©rifications
checkEnvironmentVariables();
checkSecurityHeaders();
checkSecurityMiddleware();
checkDependencies();
checkDatabaseConfig();

// R√©sum√©
console.log("\nüìä R√©sum√© de la v√©rification de s√©curit√©:");
const passed = checks.filter((check) => check === true).length;
const total = checks.length;

console.log(`‚úÖ ${passed}/${total} v√©rifications r√©ussies`);

if (passed === total) {
  console.log("\nüéâ Toutes les v√©rifications de s√©curit√© sont pass√©es !");
  console.log("‚úÖ Le projet est pr√™t pour la production");
  process.exit(0);
} else {
  console.log("\n‚ö†Ô∏è Certaines v√©rifications ont √©chou√©");
  console.log("‚ùå Corrigez les probl√®mes avant le d√©ploiement");
  process.exit(1);
}
